# Cursor Repo Rules

[project]
description = "React + TypeScript client, Node + Express server, Topia RTSDK integration"
repo = "https://github.com/metaversecloud-com/ai-template"
sdk = "@rtsdk/topia (https://metaversecloud-com.github.io/mc-sdk-js/index.html)"
goal = "App runs inside an iframe in Topia."

[constraints]
must_not_modify = [
"client/App.tsx",
"client/backendAPI.ts",
"client/setErrorMessage.ts",
"server/getCredentials.ts",
"server/errorHandler.ts"
]
must_exist = ["client/topiaInit.ts"]
preserve_structure = true
allow_only_documented_sdk_methods = true

[sdk_usage]
init = "Initialize Topia once on server with INTERACTIVE_KEY, INTERACTIVE_SECRET, INSTANCE_DOMAIN=api.topia.io, INSTANCE_PROTOCOL=https"
wrapper_file = "server/utils/topiaInit.ts (or server/sdk/\*)"
examples = ["world.fireToast({title, text})"]
error_handling = "Wrap in try/catch and return JSON { success, ... } or throw → handled by errorHandler.ts"

[architecture]
flow = "Client UI → backendAPI.ts → server routes/controllers → utils wrapper → Topia SDK"
rules = [
"No SDK calls from React",
"For new client behavior, add server route (do not bypass backendAPI.ts)",
"Controllers handle errors; utils throw new Error",
"Follow naming/response style in existing controllers"
]

[response_schema]
success = "{ success: true, data?: any }"
failure = "{ success: false, error: string }"
http_codes = { ok="200", no_content="204", client_error="4xx", server_error="5xx" }

[env]
env_example = ".env.example must include INTERACTIVE_KEY, INTERACTIVE_SECRET, INSTANCE_DOMAIN, INSTANCE_PROTOCOL"
pin_sdk_version = true

[testing]
framework = "Jest"
test_dir = "server/**tests**"
mock_module = "@rtsdk/topia → server/mocks/@rtsdk/topia.ts"
assertions = [
"HTTP status",
"JSON matches RESPONSE SCHEMA",
"Correct SDK method & args invoked",
"Credentials flow into World.create / DroppedAsset.create"
]
note = "Source may import with .js suffix for runtime ESM; Jest strips .js only for relative paths."

[styling]
prefer_css = "https://sdk-style.s3.amazonaws.com/styles-3.0.2.css"
fallback = "Vendor or document pinned copy if CDN fails"

[deliverables]
items = [
"Keep file tree; add routes in server/routes and client components/pages as needed",
"End-to-end flow without modifying backendAPI.ts",
"README updates (run, env, smoke tests)",
"Type annotations everywhere; never leak secrets to client",
"New/updated Jest tests"
]

[smoke_test]
steps = [
"Create keys in Topia dashboard integrations",
"Drop an asset in Builder Mode",
"Configure integration with Developer Public Key and enable 'Add player session credentials'",
"Add iframe link to http://localhost:3001/",
"Exit build mode and test opening the app"
]

[rules_of_engagement]
if_sdk_unclear = "Stop, stub minimal function, and ask a question"
inline_comments = "Add comment above each SDK call citing exact method"
sdk_wrapper = "Keep thin for mocking and upgrades"
preferred_change_style = "Surgical changes only; do not refactor protected files"

[workflow]
always_plan_first = true
plan_requirements = ["File tree delta", "Endpoint signatures", "Data shapes (TS interfaces)", "Tests to add/modify"]
